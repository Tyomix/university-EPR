
Hid_example_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000820  000008b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800104  00800104  000008b8  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000008b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022a  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e24  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ea  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a7  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000026f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048f  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004a7  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000030be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
   4:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_1>
   8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
   c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

00000068 <usbDescriptorHidReport>:
  68:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 95 05     .........&..u...
  78:	09 00 b2 02 01 c0                                   ......

0000007e <usbDescriptorString0>:
  7e:	04 03 09 04                                         ....

00000082 <usbDescriptorStringVendor>:
  82:	2c 03 77 00 65 00 2e 00 65 00 61 00 73 00 79 00     ,.w.e...e.a.s.y.
  92:	65 00 6c 00 65 00 63 00 74 00 72 00 6f 00 6e 00     e.l.e.c.t.r.o.n.
  a2:	69 00 63 00 73 00 2e 00 72 00 75 00                 i.c.s...r.u.

000000ae <usbDescriptorStringDevice>:
  ae:	18 03 48 00 69 00 64 00 20 00 65 00 78 00 61 00     ..H.i.d. .e.x.a.
  be:	6d 00 70 00 6c 00 65 00                             m.p.l.e.

000000c6 <usbDescriptorDevice>:
  c6:	12 01 10 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
  d6:	00 01                                               ..

000000d8 <usbDescriptorConfiguration>:
  d8:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  e8:	00 00 09 21 01 01 00 01 22 16 00 07 05 81 03 08     ...!....".......
  f8:	00 64                                               .d

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d4 e0       	ldi	r29, 0x04	; 4
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
 106:	11 e0       	ldi	r17, 0x01	; 1
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b1 e0       	ldi	r27, 0x01	; 1
 10c:	e0 e2       	ldi	r30, 0x20	; 32
 10e:	f8 e0       	ldi	r31, 0x08	; 8
 110:	02 c0       	rjmp	.+4      	; 0x116 <.do_copy_data_start>

00000112 <.do_copy_data_loop>:
 112:	05 90       	lpm	r0, Z+
 114:	0d 92       	st	X+, r0

00000116 <.do_copy_data_start>:
 116:	a4 30       	cpi	r26, 0x04	; 4
 118:	b1 07       	cpc	r27, r17
 11a:	d9 f7       	brne	.-10     	; 0x112 <.do_copy_data_loop>

0000011c <__do_clear_bss>:
 11c:	11 e0       	ldi	r17, 0x01	; 1
 11e:	a4 e0       	ldi	r26, 0x04	; 4
 120:	b1 e0       	ldi	r27, 0x01	; 1
 122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
 124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
 126:	a4 34       	cpi	r26, 0x44	; 68
 128:	b1 07       	cpc	r27, r17
 12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
 12c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
 130:	0c 94 0e 04 	jmp	0x81c	; 0x81c <_exit>

00000134 <__bad_interrupt>:
 134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <usbFunctionRead>:

/* usbFunctionRead() вызывается когда хост запрашивает порцию данных от устройства
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionRead(uchar *data, uchar len)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
    if(len > bytesRemaining)
 13e:	50 91 0c 01 	lds	r21, 0x010C
 142:	56 17       	cp	r21, r22
 144:	08 f4       	brcc	.+2      	; 0x148 <usbFunctionRead+0x10>
 146:	65 2f       	mov	r22, r21
        len = bytesRemaining;

    uchar *buffer = (uchar*)&pdata;
	interrupted=1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 05 01 	sts	0x0105, r24
 //           pdata.result[0][0] = ADCH;
 //   }

    uchar j;
    for(j=0; j<len; j++)
        data[j] = buffer[j+currentAddress];
 14e:	40 91 0b 01 	lds	r20, 0x010B
 152:	a4 2f       	mov	r26, r20
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	aa 5f       	subi	r26, 0xFA	; 250
 158:	be 4f       	sbci	r27, 0xFE	; 254
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	07 c0       	rjmp	.+14     	; 0x16e <usbFunctionRead+0x36>
   //         pdata.result[0][0] = 24;
 //           pdata.result[0][0] = ADCH;
 //   }

    uchar j;
    for(j=0; j<len; j++)
 160:	fe 01       	movw	r30, r28
 162:	e2 0f       	add	r30, r18
 164:	f3 1f       	adc	r31, r19
 166:	8d 91       	ld	r24, X+
 168:	80 83       	st	Z, r24
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	26 17       	cp	r18, r22
 170:	b8 f3       	brcs	.-18     	; 0x160 <usbFunctionRead+0x28>
        data[j] = buffer[j+currentAddress];

    currentAddress += len;
 172:	46 0f       	add	r20, r22
 174:	40 93 0b 01 	sts	0x010B, r20
    bytesRemaining -= len;
 178:	56 1b       	sub	r21, r22
 17a:	50 93 0c 01 	sts	0x010C, r21
	return len;
}
 17e:	86 2f       	mov	r24, r22
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <usbFunctionWrite>:
/* usbFunctionWrite() вызывается когда хост отправляет порцию данных к устройству
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionWrite(uchar *data, uchar len)
{
    if(bytesRemaining == 0)
 186:	80 91 0c 01 	lds	r24, 0x010C
 18a:	88 23       	and	r24, r24
 18c:	19 f4       	brne	.+6      	; 0x194 <usbFunctionWrite+0xe>
	PORTB=pdata.result[0][0];
 18e:	80 91 06 01 	lds	r24, 0x0106
 192:	85 b9       	out	0x05, r24	; 5
	interrupted=1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 05 01 	sts	0x0105, r24
	TCNT1=0;
 19a:	10 92 85 00 	sts	0x0085, r1
 19e:	10 92 84 00 	sts	0x0084, r1
      //  else
        //    PORTB &= ~_BV(3);
    //}
	
    return bytesRemaining == 0; /* 0 означает, что есть еще данные */
}
 1a2:	08 95       	ret

000001a4 <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 1a4:	fc 01       	movw	r30, r24

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID устройство */
 1a6:	80 81       	ld	r24, Z
 1a8:	80 76       	andi	r24, 0x60	; 96
 1aa:	80 32       	cpi	r24, 0x20	; 32
 1ac:	61 f4       	brne	.+24     	; 0x1c6 <usbFunctionSetup+0x22>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 1ae:	81 81       	ldd	r24, Z+1	; 0x01
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <usbFunctionSetup+0x14>
            // у нас только одна разновидность репорта, можем игнорировать report-ID
            bytesRemaining = sizeof(struct dataexchange_t);
            currentAddress = 0;
            return USB_NO_MSG;  // используем usbFunctionRead() для отправки данных хосту
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 1b4:	89 30       	cpi	r24, 0x09	; 9
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <usbFunctionSetup+0x22>
            // у нас только одна разновидность репорта, можем игнорировать report-ID
            bytesRemaining = sizeof(struct dataexchange_t);
 1b8:	85 e0       	ldi	r24, 0x05	; 5
 1ba:	80 93 0c 01 	sts	0x010C, r24
            currentAddress = 0;
 1be:	10 92 0b 01 	sts	0x010B, r1
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	08 95       	ret
            return USB_NO_MSG;  // используем usbFunctionWrite() для получения данных от хоста
 1c6:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* остальные запросы мы просто игнорируем */
    }
    return 0;
}
 1c8:	08 95       	ret

000001ca <main>:
/* ------------------------------------------------------------------------- */

int main(void)
{
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
    DDRB = 0b00111111;      // PB1,PB2,PB3 - выход
 1d6:	8f e3       	ldi	r24, 0x3F	; 63
 1d8:	84 b9       	out	0x04, r24	; 4

	ADCSRA =  (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0); // Set ADC prescalar Division factor 16. Частота измерений 56 кГц при системной 12 МГц
 1da:	84 e0       	ldi	r24, 0x04	; 4
 1dc:	80 93 7a 00 	sts	0x007A, r24
	ADMUX = 0b11100000; // Set ADC reference to внутреннее опорное 1.1V voltage with external capacitor at AREF pin
 1e0:	80 ee       	ldi	r24, 0xE0	; 224
 1e2:	80 93 7c 00 	sts	0x007C, r24
	// no left ajustment needed in 10 bit mode!
	//ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
   	// No MUX values needed to be changed to use ADC0
	

   	ADCSRA |= (1 << ADATE);  // Auto trigger enable, ADCSRB (ADTS2:0) нули - Free running mode
 1e6:	80 91 7a 00 	lds	r24, 0x007A
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	80 93 7a 00 	sts	0x007A, r24
   	ADCSRA |= (1 << ADEN);  // Enable ADC
 1f0:	80 91 7a 00 	lds	r24, 0x007A
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	80 93 7a 00 	sts	0x007A, r24
   	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
 1fa:	80 91 7a 00 	lds	r24, 0x007A
 1fe:	80 64       	ori	r24, 0x40	; 64
 200:	80 93 7a 00 	sts	0x007A, r24
			//r=ADCH;
			//r=(r<<8)+t;;  // now we have the result in 16 bit var 'r'
			
	
   
    usbInit();
 204:	0e 94 54 01 	call	0x2a8	; 0x2a8 <usbInit>
    usbDeviceDisconnect();  // принудительно отключаемся от хоста, так делать можно только при выключенных прерываниях!
 208:	54 9a       	sbi	0x0a, 4	; 10
 20a:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 20c:	48 eb       	ldi	r20, 0xB8	; 184
 20e:	5b e0       	ldi	r21, 0x0B	; 11
 210:	03 c0       	rjmp	.+6      	; 0x218 <main+0x4e>
 212:	ca 01       	movw	r24, r20
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0x4a>
    
    uchar i = 0;
    while(--i){             // пауза > 250 ms
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	d9 f7       	brne	.-10     	; 0x212 <main+0x48>
        _delay_ms(1);
    }
	TCCR1B=0b00000100; //clkI/O/256 (from prescaler)
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	80 93 81 00 	sts	0x0081, r24
    
    usbDeviceConnect();     // подключаемся
 222:	54 98       	cbi	0x0a, 4	; 10

    sei();                  // разрешаем прерывания
 224:	78 94       	sei
	if(interrupted)
	{
	interrupted=0;
	pdata.result[0][0] = 0;

	ADMUX = 0b11100000;
 226:	80 ee       	ldi	r24, 0xE0	; 224
 228:	e8 2e       	mov	r14, r24
 22a:	cc e2       	ldi	r28, 0x2C	; 44
 22c:	d1 e0       	ldi	r29, 0x01	; 1
			pdata.result[x][0]=ADCH;
			ADMUX++;
			}

		pdata.result[0][0]=TCNT1/256; //1тик=0.005461333333 с
		if(!(pdata.result[0][0])){pdata.result[0][0]=255;}
 22e:	ff 24       	eor	r15, r15
 230:	fa 94       	dec	r15
 232:	00 e3       	ldi	r16, 0x30	; 48
 234:	15 e7       	ldi	r17, 0x75	; 117
    sei();                  // разрешаем прерывания

for(;;)
{
	
	if(interrupted)
 236:	80 91 05 01 	lds	r24, 0x0105
 23a:	88 23       	and	r24, r24
 23c:	79 f1       	breq	.+94     	; 0x29c <main+0xd2>
	{
	interrupted=0;
 23e:	10 92 05 01 	sts	0x0105, r1
	pdata.result[0][0] = 0;
 242:	10 92 06 01 	sts	0x0106, r1

	ADMUX = 0b11100000;
 246:	e0 92 7c 00 	sts	0x007C, r14
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	10 c0       	rjmp	.+32     	; 0x26e <main+0xa4>
 24e:	ce 01       	movw	r24, r28
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x86>
	
			for(x=1;x<=4;x++)
			{
			_delay_us(100);
			pdata.result[x][0]=ADCH;
 254:	80 91 79 00 	lds	r24, 0x0079
 258:	e2 2f       	mov	r30, r18
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ea 5f       	subi	r30, 0xFA	; 250
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	80 83       	st	Z, r24
			ADMUX++;
 262:	80 91 7c 00 	lds	r24, 0x007C
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	80 93 7c 00 	sts	0x007C, r24
 26c:	2f 5f       	subi	r18, 0xFF	; 255
	interrupted=0;
	pdata.result[0][0] = 0;

	ADMUX = 0b11100000;
	
			for(x=1;x<=4;x++)
 26e:	25 30       	cpi	r18, 0x05	; 5
 270:	70 f3       	brcs	.-36     	; 0x24e <main+0x84>
 272:	20 93 00 01 	sts	0x0100, r18
			_delay_us(100);
			pdata.result[x][0]=ADCH;
			ADMUX++;
			}

		pdata.result[0][0]=TCNT1/256; //1тик=0.005461333333 с
 276:	80 91 84 00 	lds	r24, 0x0084
 27a:	90 91 85 00 	lds	r25, 0x0085
 27e:	90 93 06 01 	sts	0x0106, r25
		if(!(pdata.result[0][0])){pdata.result[0][0]=255;}
 282:	99 23       	and	r25, r25
 284:	11 f4       	brne	.+4      	; 0x28a <main+0xc0>
 286:	f0 92 06 01 	sts	0x0106, r15
	    usbPoll();          
 28a:	0e 94 83 01 	call	0x306	; 0x306 <usbPoll>
 28e:	8a ee       	ldi	r24, 0xEA	; 234
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	fe 01       	movw	r30, r28
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0xca>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 298:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29a:	d9 f7       	brne	.-10     	; 0x292 <main+0xc8>
 29c:	c8 01       	movw	r24, r16
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <main+0xd4>
		_delay_ms(49);
    }


_delay_ms(10); 	
usbPoll();// эту функцию надо регулярно вызывать с главного цикла, максимальная задержка между вызовами - 50 ms
 2a2:	0e 94 83 01 	call	0x306	; 0x306 <usbPoll>
 2a6:	c7 cf       	rjmp	.-114    	; 0x236 <main+0x6c>

000002a8 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 2a8:	e9 e6       	ldi	r30, 0x69	; 105
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 2b2:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 2b4:	8b e4       	ldi	r24, 0x4B	; 75
 2b6:	80 93 1a 01 	sts	0x011A, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 2ba:	8a e5       	ldi	r24, 0x5A	; 90
 2bc:	80 93 19 01 	sts	0x0119, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 2c0:	08 95       	ret

000002c2 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 2c2:	1f 93       	push	r17
 2c4:	dc 01       	movw	r26, r24
 2c6:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 2c8:	80 91 19 01 	lds	r24, 0x0119
 2cc:	84 ff       	sbrs	r24, 4
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 2d0:	80 91 1a 01 	lds	r24, 0x011A
 2d4:	98 e8       	ldi	r25, 0x88	; 136
 2d6:	89 27       	eor	r24, r25
 2d8:	80 93 1a 01 	sts	0x011A, r24
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 2de:	8a e5       	ldi	r24, 0x5A	; 90
 2e0:	80 93 19 01 	sts	0x0119, r24
 2e4:	91 2f       	mov	r25, r17
 2e6:	eb e1       	ldi	r30, 0x1B	; 27
 2e8:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 2ea:	8d 91       	ld	r24, X+
 2ec:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 2ee:	91 50       	subi	r25, 0x01	; 1
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 2f2:	8b e1       	ldi	r24, 0x1B	; 27
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	61 2f       	mov	r22, r17
 2f8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 2fc:	1c 5f       	subi	r17, 0xFC	; 252
 2fe:	10 93 19 01 	sts	0x0119, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 302:	1f 91       	pop	r17
 304:	08 95       	ret

00000306 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 30c:	60 91 2a 01 	lds	r22, 0x012A
 310:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 312:	67 fd       	sbrc	r22, 7
 314:	c4 c0       	rjmp	.+392    	; 0x49e <usbPoll+0x198>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 316:	80 91 27 01 	lds	r24, 0x0127
 31a:	cc e0       	ldi	r28, 0x0C	; 12
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	c8 1b       	sub	r28, r24
 320:	d1 09       	sbc	r29, r1
 322:	c2 5d       	subi	r28, 0xD2	; 210
 324:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 326:	80 91 26 01 	lds	r24, 0x0126
 32a:	8d 32       	cpi	r24, 0x2D	; 45
 32c:	09 f0       	breq	.+2      	; 0x330 <usbPoll+0x2a>
 32e:	a4 c0       	rjmp	.+328    	; 0x478 <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 330:	68 30       	cpi	r22, 0x08	; 8
 332:	09 f0       	breq	.+2      	; 0x336 <usbPoll+0x30>
 334:	b2 c0       	rjmp	.+356    	; 0x49a <usbPoll+0x194>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 336:	83 ec       	ldi	r24, 0xC3	; 195
 338:	80 93 0e 01 	sts	0x010E, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 33c:	8a e5       	ldi	r24, 0x5A	; 90
 33e:	80 93 01 01 	sts	0x0101, r24
        usbMsgFlags = 0;
 342:	10 92 0d 01 	sts	0x010D, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 346:	88 81       	ld	r24, Y
 348:	80 76       	andi	r24, 0x60	; 96
 34a:	41 f0       	breq	.+16     	; 0x35c <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
 34c:	ce 01       	movw	r24, r28
 34e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <usbFunctionSetup>
 352:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 354:	8f 3f       	cpi	r24, 0xFF	; 255
 356:	09 f4       	brne	.+2      	; 0x35a <usbPoll+0x54>
 358:	7e c0       	rjmp	.+252    	; 0x456 <usbPoll+0x150>
 35a:	84 c0       	rjmp	.+264    	; 0x464 <usbPoll+0x15e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 35c:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 35e:	10 92 17 01 	sts	0x0117, r1
    SWITCH_START(rq->bRequest)
 362:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 364:	88 23       	and	r24, r24
 366:	21 f4       	brne	.+8      	; 0x370 <usbPoll+0x6a>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 368:	10 92 18 01 	sts	0x0118, r1
 36c:	22 e0       	ldi	r18, 0x02	; 2
 36e:	6c c0       	rjmp	.+216    	; 0x448 <usbPoll+0x142>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 370:	85 30       	cpi	r24, 0x05	; 5
 372:	19 f4       	brne	.+6      	; 0x37a <usbPoll+0x74>
        usbNewDeviceAddr = value;
 374:	90 93 2b 01 	sts	0x012B, r25
 378:	66 c0       	rjmp	.+204    	; 0x446 <usbPoll+0x140>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 37a:	86 30       	cpi	r24, 0x06	; 6
 37c:	09 f0       	breq	.+2      	; 0x380 <usbPoll+0x7a>
 37e:	4f c0       	rjmp	.+158    	; 0x41e <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 380:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	41 f4       	brne	.+16     	; 0x396 <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 386:	86 ec       	ldi	r24, 0xC6	; 198
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	90 93 29 01 	sts	0x0129, r25
 38e:	80 93 28 01 	sts	0x0128, r24
 392:	22 e1       	ldi	r18, 0x12	; 18
 394:	40 c0       	rjmp	.+128    	; 0x416 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	41 f4       	brne	.+16     	; 0x3aa <usbPoll+0xa4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 39a:	88 ed       	ldi	r24, 0xD8	; 216
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	90 93 29 01 	sts	0x0129, r25
 3a2:	80 93 28 01 	sts	0x0128, r24
 3a6:	22 e2       	ldi	r18, 0x22	; 34
 3a8:	36 c0       	rjmp	.+108    	; 0x416 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	f9 f4       	brne	.+62     	; 0x3ec <usbPoll+0xe6>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 3b0:	88 23       	and	r24, r24
 3b2:	41 f4       	brne	.+16     	; 0x3c4 <usbPoll+0xbe>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 3b4:	8e e7       	ldi	r24, 0x7E	; 126
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 29 01 	sts	0x0129, r25
 3bc:	80 93 28 01 	sts	0x0128, r24
 3c0:	24 e0       	ldi	r18, 0x04	; 4
 3c2:	29 c0       	rjmp	.+82     	; 0x416 <usbPoll+0x110>
        SWITCH_CASE(1)
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	41 f4       	brne	.+16     	; 0x3d8 <usbPoll+0xd2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 3c8:	82 e8       	ldi	r24, 0x82	; 130
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	90 93 29 01 	sts	0x0129, r25
 3d0:	80 93 28 01 	sts	0x0128, r24
 3d4:	2c e2       	ldi	r18, 0x2C	; 44
 3d6:	1f c0       	rjmp	.+62     	; 0x416 <usbPoll+0x110>
        SWITCH_CASE(2)
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	e1 f4       	brne	.+56     	; 0x414 <usbPoll+0x10e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 3dc:	8e ea       	ldi	r24, 0xAE	; 174
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	90 93 29 01 	sts	0x0129, r25
 3e4:	80 93 28 01 	sts	0x0128, r24
 3e8:	28 e1       	ldi	r18, 0x18	; 24
 3ea:	15 c0       	rjmp	.+42     	; 0x416 <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 3ec:	81 32       	cpi	r24, 0x21	; 33
 3ee:	41 f4       	brne	.+16     	; 0x400 <usbPoll+0xfa>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 3f0:	8a ee       	ldi	r24, 0xEA	; 234
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 29 01 	sts	0x0129, r25
 3f8:	80 93 28 01 	sts	0x0128, r24
 3fc:	29 e0       	ldi	r18, 0x09	; 9
 3fe:	0b c0       	rjmp	.+22     	; 0x416 <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 400:	82 32       	cpi	r24, 0x22	; 34
 402:	41 f4       	brne	.+16     	; 0x414 <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 404:	88 e6       	ldi	r24, 0x68	; 104
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	90 93 29 01 	sts	0x0129, r25
 40c:	80 93 28 01 	sts	0x0128, r24
 410:	26 e1       	ldi	r18, 0x16	; 22
 412:	01 c0       	rjmp	.+2      	; 0x416 <usbPoll+0x110>
 414:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 416:	80 e4       	ldi	r24, 0x40	; 64
 418:	80 93 0d 01 	sts	0x010D, r24
 41c:	23 c0       	rjmp	.+70     	; 0x464 <usbPoll+0x15e>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 41e:	88 30       	cpi	r24, 0x08	; 8
 420:	21 f4       	brne	.+8      	; 0x42a <usbPoll+0x124>
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	8d e2       	ldi	r24, 0x2D	; 45
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	11 c0       	rjmp	.+34     	; 0x44c <usbPoll+0x146>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 42a:	89 30       	cpi	r24, 0x09	; 9
 42c:	19 f4       	brne	.+6      	; 0x434 <usbPoll+0x12e>
        usbConfiguration = value;
 42e:	90 93 2d 01 	sts	0x012D, r25
 432:	09 c0       	rjmp	.+18     	; 0x446 <usbPoll+0x140>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 434:	8a 30       	cpi	r24, 0x0A	; 10
 436:	11 f4       	brne	.+4      	; 0x43c <usbPoll+0x136>
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	06 c0       	rjmp	.+12     	; 0x448 <usbPoll+0x142>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 43c:	8b 30       	cpi	r24, 0x0B	; 11
 43e:	19 f4       	brne	.+6      	; 0x446 <usbPoll+0x140>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 440:	8b e4       	ldi	r24, 0x4B	; 75
 442:	80 93 1a 01 	sts	0x011A, r24
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	87 e1       	ldi	r24, 0x17	; 23
 44a:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 44c:	90 93 29 01 	sts	0x0129, r25
 450:	80 93 28 01 	sts	0x0128, r24
 454:	07 c0       	rjmp	.+14     	; 0x464 <usbPoll+0x15e>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 456:	88 81       	ld	r24, Y
 458:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 45a:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	80 93 0d 01 	sts	0x010D, r24
 462:	06 c0       	rjmp	.+12     	; 0x470 <usbPoll+0x16a>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 464:	8f 81       	ldd	r24, Y+7	; 0x07
 466:	88 23       	and	r24, r24
 468:	19 f4       	brne	.+6      	; 0x470 <usbPoll+0x16a>
 46a:	8e 81       	ldd	r24, Y+6	; 0x06
 46c:	82 17       	cp	r24, r18
 46e:	08 f0       	brcs	.+2      	; 0x472 <usbPoll+0x16c>
 470:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 472:	80 93 02 01 	sts	0x0102, r24
 476:	11 c0       	rjmp	.+34     	; 0x49a <usbPoll+0x194>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 478:	80 91 0d 01 	lds	r24, 0x010D
 47c:	87 ff       	sbrs	r24, 7
 47e:	0d c0       	rjmp	.+26     	; 0x49a <usbPoll+0x194>
            uchar rval = usbFunctionWrite(data, len);
 480:	ce 01       	movw	r24, r28
 482:	0e 94 c3 00 	call	0x186	; 0x186 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 486:	8f 3f       	cpi	r24, 0xFF	; 255
 488:	21 f4       	brne	.+8      	; 0x492 <usbPoll+0x18c>
                usbTxLen = USBPID_STALL;
 48a:	8e e1       	ldi	r24, 0x1E	; 30
 48c:	80 93 01 01 	sts	0x0101, r24
 490:	04 c0       	rjmp	.+8      	; 0x49a <usbPoll+0x194>
            }else if(rval != 0){    /* This was the final package */
 492:	88 23       	and	r24, r24
 494:	11 f0       	breq	.+4      	; 0x49a <usbPoll+0x194>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 496:	10 92 02 01 	sts	0x0102, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 49a:	10 92 2a 01 	sts	0x012A, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 49e:	80 91 01 01 	lds	r24, 0x0101
 4a2:	84 ff       	sbrs	r24, 4
 4a4:	5a c0       	rjmp	.+180    	; 0x55a <__stack+0x5b>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 4a6:	80 91 02 01 	lds	r24, 0x0102
 4aa:	8f 3f       	cpi	r24, 0xFF	; 255
 4ac:	09 f4       	brne	.+2      	; 0x4b0 <usbPoll+0x1aa>
 4ae:	55 c0       	rjmp	.+170    	; 0x55a <__stack+0x5b>
 4b0:	18 2f       	mov	r17, r24
 4b2:	89 30       	cpi	r24, 0x09	; 9
 4b4:	08 f0       	brcs	.+2      	; 0x4b8 <usbPoll+0x1b2>
 4b6:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 4b8:	81 1b       	sub	r24, r17
 4ba:	80 93 02 01 	sts	0x0102, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 4be:	80 91 0e 01 	lds	r24, 0x010E
 4c2:	98 e8       	ldi	r25, 0x88	; 136
 4c4:	89 27       	eor	r24, r25
 4c6:	80 93 0e 01 	sts	0x010E, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 4ca:	11 23       	and	r17, r17
 4cc:	99 f1       	breq	.+102    	; 0x534 <__stack+0x35>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 4ce:	80 91 0d 01 	lds	r24, 0x010D
 4d2:	87 ff       	sbrs	r24, 7
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <usbPoll+0x1e2>
            len = usbFunctionRead(data, len);
 4d6:	8f e0       	ldi	r24, 0x0F	; 15
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	61 2f       	mov	r22, r17
 4dc:	0e 94 9c 00 	call	0x138	; 0x138 <usbFunctionRead>
 4e0:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 4e2:	89 30       	cpi	r24, 0x09	; 9
 4e4:	a0 f5       	brcc	.+104    	; 0x54e <__stack+0x4f>
 4e6:	26 c0       	rjmp	.+76     	; 0x534 <__stack+0x35>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 4e8:	20 91 28 01 	lds	r18, 0x0128
 4ec:	30 91 29 01 	lds	r19, 0x0129
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 4f0:	86 ff       	sbrs	r24, 6
 4f2:	0d c0       	rjmp	.+26     	; 0x50e <__stack+0xf>
 4f4:	af e0       	ldi	r26, 0x0F	; 15
 4f6:	b1 e0       	ldi	r27, 0x01	; 1
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 4fc:	f9 01       	movw	r30, r18
 4fe:	e8 0f       	add	r30, r24
 500:	f9 1f       	adc	r31, r25
 502:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 504:	ed 93       	st	X+, r30
 506:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 508:	18 17       	cp	r17, r24
 50a:	c1 f7       	brne	.-16     	; 0x4fc <usbPoll+0x1f6>
 50c:	08 c0       	rjmp	.+16     	; 0x51e <__stack+0x1f>
 50e:	91 2f       	mov	r25, r17
 510:	d9 01       	movw	r26, r18
 512:	ef e0       	ldi	r30, 0x0F	; 15
 514:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 516:	8d 91       	ld	r24, X+
 518:	81 93       	st	Z+, r24
                }while(--i);
 51a:	91 50       	subi	r25, 0x01	; 1
 51c:	e1 f7       	brne	.-8      	; 0x516 <__stack+0x17>
 51e:	11 50       	subi	r17, 0x01	; 1
 520:	81 2f       	mov	r24, r17
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	1f 5f       	subi	r17, 0xFF	; 255
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	82 0f       	add	r24, r18
 52a:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 52c:	90 93 29 01 	sts	0x0129, r25
 530:	80 93 28 01 	sts	0x0128, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 534:	8f e0       	ldi	r24, 0x0F	; 15
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	61 2f       	mov	r22, r17
 53a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 53e:	61 2f       	mov	r22, r17
 540:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 542:	6c 30       	cpi	r22, 0x0C	; 12
 544:	41 f0       	breq	.+16     	; 0x556 <__stack+0x57>
            usbMsgLen = USB_NO_MSG;
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	80 93 02 01 	sts	0x0102, r24
 54c:	04 c0       	rjmp	.+8      	; 0x556 <__stack+0x57>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	80 93 02 01 	sts	0x0102, r24
 554:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 556:	60 93 01 01 	sts	0x0101, r22
 55a:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 55c:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
 55e:	84 71       	andi	r24, 0x14	; 20
 560:	31 f4       	brne	.+12     	; 0x56e <__stack+0x6f>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 562:	91 50       	subi	r25, 0x01	; 1
 564:	d9 f7       	brne	.-10     	; 0x55c <__stack+0x5d>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 566:	10 92 2b 01 	sts	0x012B, r1
    usbDeviceAddr = 0;
 56a:	10 92 25 01 	sts	0x0125, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	08 95       	ret

00000576 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 576:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 578:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 57a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 57e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 580:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 582:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 584:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 586:	09 c0       	rjmp	.+18     	; 0x59a <usbCrcLoopEntry>

00000588 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 588:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 58a:	82 27       	eor	r24, r18

0000058c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 58c:	97 95       	ror	r25
    ror     resCrcL
 58e:	87 95       	ror	r24
    brcs    usbCrcNoXor
 590:	10 f0       	brcs	.+4      	; 0x596 <usbCrcNoXor>
    eor     resCrcL, polyL
 592:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 594:	95 27       	eor	r25, r21

00000596 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 596:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 598:	c8 f3       	brcs	.-14     	; 0x58c <usbCrcBitLoop>

0000059a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 59a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 59c:	a8 f3       	brcs	.-22     	; 0x588 <usbCrcByteLoop>

0000059e <usbCrcReady>:
usbCrcReady:
    ret
 59e:	08 95       	ret

000005a0 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 5a0:	ea df       	rcall	.-44     	; 0x576 <usbCrc16>
    st      ptr+, resCrcL
 5a2:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 5a4:	9d 93       	st	X+, r25
    ret
 5a6:	08 95       	ret

000005a8 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 5a8:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 5aa:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 5ac:	cf 93       	push	r28

000005ae <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 5ae:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 5b0:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 5b2:	e9 f7       	brne	.-6      	; 0x5ae <waitForJ>

000005b4 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 5b4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 5b6:	09 c0       	rjmp	.+18     	; 0x5ca <foundK>
    sbis    USBIN, USBMINUS
 5b8:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 5ba:	07 c0       	rjmp	.+14     	; 0x5ca <foundK>
    sbis    USBIN, USBMINUS
 5bc:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 5be:	05 c0       	rjmp	.+10     	; 0x5ca <foundK>
    sbis    USBIN, USBMINUS
 5c0:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <foundK>
    sbis    USBIN, USBMINUS
 5c4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 5c8:	a3 c0       	rjmp	.+326    	; 0x710 <sofError>

000005ca <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 5ca:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 5cc:	c0 91 27 01 	lds	r28, 0x0127
    clr     YH                  ;1 [5]
 5d0:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 5d2:	c2 5d       	subi	r28, 0xD2	; 210
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 5d4:	de 4f       	sbci	r29, 0xFE	; 254

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 5d6:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK    ;2 [10]
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 5da:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 5dc:	eb cf       	rjmp	.-42     	; 0x5b4 <waitForK>

000005de <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 5de:	2f 93       	push	r18
    push    x1              ;2 [12]
 5e0:	0f 93       	push	r16
    push    x2              ;2 [14]
 5e2:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 5e4:	09 b1       	in	r16, 0x09	; 9
    ldi     shift, 0xff     ;1 [18]
 5e6:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 5e8:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
 5ea:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 5ec:	4f 93       	push	r20
    push    cnt             ;2 [24]
 5ee:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 5f0:	19 b1       	in	r17, 0x09	; 9
    ser     x3              ;1 [26] [inserted init instruction]
 5f2:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 5f4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 5f6:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
 5f8:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 5fa:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 5fc:	31 c0       	rjmp	.+98     	; 0x660 <rxbit2>

000005fe <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 5fe:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 600:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 602:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x01 ;1 [18]
 604:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 606:	28 c0       	rjmp	.+80     	; 0x658 <didUnstuff0>

00000608 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 608:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 60a:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 60c:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 60e:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 610:	09 b1       	in	r16, 0x09	; 9
    rjmp    didUnstuff1 ;2 [27]
 612:	29 c0       	rjmp	.+82     	; 0x666 <didUnstuff1>

00000614 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 614:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 616:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 618:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 61a:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 61c:	19 b1       	in	r17, 0x09	; 9
    rjmp    didUnstuff2 ;2 [35]
 61e:	2b c0       	rjmp	.+86     	; 0x676 <didUnstuff2>

00000620 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 620:	19 b1       	in	r17, 0x09	; 9
    andi    x3, ~0x08   ;1 [35]
 622:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 624:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 626:	2a c0       	rjmp	.+84     	; 0x67c <didUnstuff3>

00000628 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 628:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 62a:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x10 ;1 [42]
 62c:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 62e:	2c c0       	rjmp	.+88     	; 0x688 <didUnstuff4>

00000630 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 630:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 632:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x20 ;1 [50]
 634:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 636:	2f c0       	rjmp	.+94     	; 0x696 <didUnstuff5>

00000638 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 638:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 63a:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x40 ;1 [58]
 63c:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 63e:	32 c0       	rjmp	.+100    	; 0x6a4 <didUnstuff6>

00000640 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 640:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 642:	09 b1       	in	r16, 0x09	; 9
    st      y+, x3      ;2 [3] store data
 644:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 646:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 648:	00 00       	nop
    eor     x2, x1      ;1 [6]
 64a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 64c:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
 64e:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 650:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1 [10]
 652:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
 654:	c9 f1       	breq	.+114    	; 0x6c8 <se0>
    andi    shift, 0xf9 ;1 [12]
 656:	29 7f       	andi	r18, 0xF9	; 249

00000658 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 658:	91 f2       	breq	.-92     	; 0x5fe <unstuff0>
    eor     x1, x2      ;1 [14]
 65a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 65c:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
 65e:	21 f9       	bld	r18, 1

00000660 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 660:	09 b1       	in	r16, 0x09	; 9
    andi    shift, 0xf3 ;1 [18]
 662:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 664:	89 f2       	breq	.-94     	; 0x608 <unstuff1>

00000666 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 666:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 668:	58 f1       	brcs	.+86     	; 0x6c0 <overflow>
    eor     x2, x1      ;1 [22]
 66a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 66c:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
 66e:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 670:	19 b1       	in	r17, 0x09	; 9
    andi    shift, 0xe7 ;1 [26]
 672:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 674:	79 f2       	breq	.-98     	; 0x614 <unstuff2>

00000676 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 676:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 678:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
 67a:	23 f9       	bld	r18, 3

0000067c <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 67c:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 67e:	81 f2       	breq	.-96     	; 0x620 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 680:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [34]
 682:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 684:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
 686:	24 f9       	bld	r18, 4

00000688 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 688:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 68a:	71 f2       	breq	.-100    	; 0x628 <unstuff4>
    nop2                ;2 [40]
 68c:	00 c0       	rjmp	.+0      	; 0x68e <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 68e:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [42]
 690:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 692:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
 694:	25 f9       	bld	r18, 5

00000696 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 696:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 698:	59 f2       	breq	.-106    	; 0x630 <unstuff5>
    nop2                ;2 [48]
 69a:	00 c0       	rjmp	.+0      	; 0x69c <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 69c:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [50]
 69e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 6a0:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
 6a2:	26 f9       	bld	r18, 6

000006a4 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 6a4:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 6a6:	40 f2       	brcs	.-112    	; 0x638 <unstuff6>
    nop2                ;2 [56]
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 6aa:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [58]
 6ac:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 6ae:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
 6b0:	27 f9       	bld	r18, 7

000006b2 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 6b2:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 6b4:	28 f6       	brcc	.-118    	; 0x640 <rxLoop>

000006b6 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 6b6:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 6b8:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 6ba:	19 b1       	in	r17, 0x09	; 9
    nop                 ;1 [66]
 6bc:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 6be:	f9 cf       	rjmp	.-14     	; 0x6b2 <didUnstuff7>

000006c0 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 6c0:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 6c2:	1c bb       	out	0x1c, r17	; 28

000006c4 <ignorePacket>:
ignorePacket:
    clr     token
 6c4:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 6c6:	19 c0       	rjmp	.+50     	; 0x6fa <handleSetupOrOut>

000006c8 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 6c8:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 6ca:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 6cc:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 6ce:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 6d0:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 6d2:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 6d4:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 6d6:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 6d8:	f9 f0       	breq	.+62     	; 0x718 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 6da:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 6dc:	e9 f0       	breq	.+58     	; 0x718 <handleData>
    lds     shift, usbDeviceAddr;[17]
 6de:	20 91 25 01 	lds	r18, 0x0125
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 6e2:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 6e4:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 6e6:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 6e8:	ed cf       	rjmp	.-38     	; 0x6c4 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 6ea:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 6ec:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 6ee:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 6f0:	41 f1       	breq	.+80     	; 0x742 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 6f2:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 6f4:	11 f0       	breq	.+4      	; 0x6fa <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 6f6:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 6f8:	29 f7       	brne	.-54     	; 0x6c4 <ignorePacket>

000006fa <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 6fa:	00 93 2c 01 	sts	0x012C, r16

000006fe <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 6fe:	3f 91       	pop	r19
 700:	4f 91       	pop	r20
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	2f 91       	pop	r18
 708:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 70a:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 70c:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 70e:	4f cf       	rjmp	.-354    	; 0x5ae <waitForJ>

00000710 <sofError>:
sofError:
    POP_RETI                    ;macro call
 710:	cf 91       	pop	r28
 712:	cf bf       	out	0x3f, r28	; 63
 714:	cf 91       	pop	r28
    reti
 716:	18 95       	reti

00000718 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 718:	20 91 2c 01 	lds	r18, 0x012C
    tst     shift               ;[20]
 71c:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 71e:	79 f3       	breq	.-34     	; 0x6fe <doReturn>
    lds     x2, usbRxLen        ;[22]
 720:	10 91 2a 01 	lds	r17, 0x012A
    tst     x2                  ;[24]
 724:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 726:	69 f5       	brne	.+90     	; 0x782 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 728:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 72a:	6a f1       	brmi	.+90     	; 0x786 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 72c:	30 93 2a 01 	sts	0x012A, r19
    sts     usbRxToken, shift   ;[30]
 730:	20 93 26 01 	sts	0x0126, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 734:	10 91 27 01 	lds	r17, 0x0127
    ldi     cnt, USB_BUFSIZE    ;[34]
 738:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 73a:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 73c:	30 93 27 01 	sts	0x0127, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 740:	22 c0       	rjmp	.+68     	; 0x786 <sendAckAndReti>

00000742 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 742:	00 91 2a 01 	lds	r16, 0x012A
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 746:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 748:	e4 f4       	brge	.+56     	; 0x782 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 74a:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 74c:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 74e:	49 f4       	brne	.+18     	; 0x762 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 750:	30 91 01 01 	lds	r19, 0x0101
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 754:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 756:	19 c0       	rjmp	.+50     	; 0x78a <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 758:	00 93 01 01 	sts	0x0101, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 75c:	ce e0       	ldi	r28, 0x0E	; 14
    ldi     YH, hi8(usbTxBuf)   ;[44]
 75e:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 760:	18 c0       	rjmp	.+48     	; 0x792 <usbSendAndReti>

00000762 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 762:	30 91 19 01 	lds	r19, 0x0119
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 766:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 768:	10 c0       	rjmp	.+32     	; 0x78a <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 76a:	00 93 19 01 	sts	0x0119, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 76e:	ca e1       	ldi	r28, 0x1A	; 26
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 770:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 772:	0f c0       	rjmp	.+30     	; 0x792 <usbSendAndReti>

00000774 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 774:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 776:	a8 f4       	brcc	.+42     	; 0x7a2 <doExorN1>
    subi    x4, 1               ;[-3]
 778:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 77a:	a9 f4       	brne	.+42     	; 0x7a6 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 77c:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 77e:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 780:	f9 cf       	rjmp	.-14     	; 0x774 <stuffN1Delay>

00000782 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 782:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 784:	03 c0       	rjmp	.+6      	; 0x78c <usbSendX3>

00000786 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 786:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 788:	01 c0       	rjmp	.+2      	; 0x78c <usbSendX3>

0000078a <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 78a:	43 2f       	mov	r20, r19

0000078c <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 78c:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 78e:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 790:	32 e0       	ldi	r19, 0x02	; 2

00000792 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 792:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK         ;[-11]
 794:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 796:	5c 9a       	sbi	0x0b, 4	; 11
    out     USBDDR, x2          ;[-8] <--- acquire bus
 798:	1a b9       	out	0x0a, r17	; 10
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 79a:	0b b1       	in	r16, 0x0b	; 11
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 79c:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 79e:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
 7a0:	5f 93       	push	r21

000007a2 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 7a2:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 7a4:	56 e0       	ldi	r21, 0x06	; 6

000007a6 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 7a6:	0b b9       	out	0x0b, r16	; 11
    ror     shift               ;[01]
 7a8:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 7aa:	20 f4       	brcc	.+8      	; 0x7b4 <doExorN2>
    subi    x4, 1               ;[03]
 7ac:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 7b0:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 7b2:	f9 cf       	rjmp	.-14     	; 0x7a6 <commonN1>

000007b4 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 7b4:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 7b6:	56 e0       	ldi	r21, 0x06	; 6

000007b8 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 7b8:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 7ba:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 7bc:	0b b9       	out	0x0b, r16	; 11
    brcs    txBitloop           ;[09]      [25] [41]
 7be:	d0 f2       	brcs	.-76     	; 0x774 <stuffN1Delay>

000007c0 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 7c0:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 7c2:	28 f4       	brcc	.+10     	; 0x7ce <doExor6>
    subi    x4, 1               ;[44]
 7c4:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 7c6:	29 f4       	brne	.+10     	; 0x7d2 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 7c8:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 7ca:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 7cc:	f9 cf       	rjmp	.-14     	; 0x7c0 <stuff6Delay>

000007ce <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 7ce:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 7d0:	56 e0       	ldi	r21, 0x06	; 6

000007d2 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 7d2:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 7d4:	0b b9       	out	0x0b, r16	; 11
    brcc    doExor7             ;[49]
 7d6:	20 f4       	brcc	.+8      	; 0x7e0 <doExor7>
    subi    x4, 1               ;[50]
 7d8:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 7da:	21 f4       	brne	.+8      	; 0x7e4 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 7dc:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 7de:	f9 cf       	rjmp	.-14     	; 0x7d2 <common6>

000007e0 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 7e0:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 7e2:	56 e0       	ldi	r21, 0x06	; 6

000007e4 <common7>:
common7:
    ld      shift, y+           ;[53]
 7e4:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 7e6:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 7e8:	0b b9       	out	0x0b, r16	; 11
    brne    txByteLoop          ;[57]
 7ea:	21 f6       	brne	.-120    	; 0x774 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 7ec:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
 7ee:	10 91 2b 01 	lds	r17, 0x012B
    lsl     x2                  ;[61] we compare with left shifted address
 7f2:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 7f4:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 7f6:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 7f8:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 7fa:	11 f0       	breq	.+4      	; 0x800 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 7fc:	10 93 25 01 	sts	0x0125, r17

00000800 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 800:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[04]
 802:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE         ;[05]
 804:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
 806:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK         ;[07] set both pins to input
 808:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
 80a:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 80c:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
 80e:	5f 91       	pop	r21
    nop2                        ;[12]
 810:	00 c0       	rjmp	.+0      	; 0x812 <skipAddrAssign+0x12>
    nop2                        ;[14]
 812:	00 c0       	rjmp	.+0      	; 0x814 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 814:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2          ;[17] <-- release bus now
 816:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 818:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 81a:	71 cf       	rjmp	.-286    	; 0x6fe <doReturn>

0000081c <_exit>:
 81c:	f8 94       	cli

0000081e <__stop_program>:
 81e:	ff cf       	rjmp	.-2      	; 0x81e <__stop_program>
